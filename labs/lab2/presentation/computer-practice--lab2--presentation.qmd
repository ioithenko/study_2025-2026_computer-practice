---
# Author
author:
  name: Ищенко Ирина Олеговна
  orcid: 0009-0002-0659-9651
  email: 1132226529@rudn.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
# Title
title: Лабораторная работа №2
subtitle: Компьютерный практикум по статистическому анализу данных
# Generic options
lang: ru-RU
crossref:
  lof-title: Список иллюстраций
  lot-title: Список таблиц
  lol-title: Листинги
# Formats
format:
## Pdf output format
  beamer:
    colorlinks: false
    toc-depth: 2
    slide_level: 2
    aspectratio: 169
    section-titles: true
    theme: metropolis
    colortheme: metropolis
    themeoptions: progressbar=frametitle,sectionpage=progressbar,numbering=fraction
    incremental: false
    mainfont: "IBM Plex Serif"
    sansfont: "IBM Plex Sans"
    monofont: "IBM Plex Mono"
## Language
    babel-lang: russian
    babel-otherlangs: english
## Html output
  revealjs:
    transition: slide
    margin: 0.2
    smaller: false
    output-ext: html
    theme: beige
    logo: _resources/image/logo_rudn.png
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Ищенко Ирина Олеговна
  * уч. группа: НПИбд-01-22
  * Факультет физико-математических и естественных наук

:::
::: {.column width="30%"}

:::
::::::::::::::

# Цель работы

Основная цель работы -- изучить несколько структур данных, реализованных в Julia,
научиться применять их и операции над ними для решения задач.

# Выполнение лабораторной работы

Кортеж (Tuple) -- структура данных (контейнер) в виде неизменяемой индексируемой
последовательности элементов какого-либо типа (элементы индексируются с единицы).

Словарь -- неупорядоченный набор связанных между собой по ключу данных.

Множество, как структура данных в Julia, соответствует множеству, как математическому объекту, то есть является неупорядоченной совокупностью элементов какого-либо типа. Возможные операции над множествами: объединение, пересечение, разность; принадлежность элемента множеству.

Массив — коллекция упорядоченных элементов, размещённая в многомерной сетке. Векторы и матрицы являются частными случаями массивов.

# Даны множества: $A = {0, 3, 4, 9}, B = {1, 3, 4, 7}, C = {0, 1, 2, 4, 7, 8, 9}$. Найдем $P = A \cap B \cup A \cap B \cup A \cap C \cup B \cap C$.


```julia
A = Set([0, 3, 4, 9])
B = Set([1, 3, 4 ,7])
C = Set([0, 1, 2, 4, 7, 8, 9])

P = union(intersect(A, B),intersect(A, C), intersect(B, C))
```




    Set{Int64} with 6 elements:
      0
      4
      7
      9
      3
      1

# Приведем свои примеры с выполнением операций над множествами элементов разных типов.


```julia
Exm = Set([2.0, 3, "lab2", "task"])
```




    Set{Any} with 4 elements:
      "task"
      2.0
      "lab2"
      3




```julia
push!(Exm, 31)
```




    Set{Any} with 5 elements:
      "task"
      2.0
      31
      "lab2"
      3




```julia
pop!(Exm)
```




    "task"

# 3.1) Массив $(1, 2, 3, \ldots, N-1, N)$, $N > 20$

```julia
ar1 = [i for i in 1:25]
print(ar1, "\n")
```

    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]

# 3.2) Массив $(N, N-1, \ldots, 2, 1)$, $N > 20$

```julia
ar2 = []
ar2 = reverse([i for i in 1:25])
print(ar2, "\n")
```

    [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

# 3.3) Массив $(1, 2, 3, \ldots, N-1, N, N-1, \ldots, 2, 1)$, $N > 20$

```julia
ar1 = [i for i in 1:25]
print(ar1, "\n")

ar2 = []
ar2 = reverse([i for i in 1:25])
print(ar2, "\n")

print(vcat(ar1[1:24], ar2), "\n")
```

    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

# 3.4 - 3.8

```julia
tmp = [4 6 3]
print(tmp, "\n")

print(vcat(fill.(tmp, [10 1 1])...), "\n")
print(vcat(fill.(tmp, [10 10 10])...), "\n")
print(vcat(fill.(tmp, [11 10 10])...), "\n")
print(vcat(fill.(tmp, [10 20 30])...), "\n")
```

    [4 6 3]
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 3]
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]

# 3.9) Массив из элементов вида $2^{tmp[i]}$, $i = 1, 2, 3$, где элемент $2^{tmp[3]}$ встречается 4 раза; посчитайте в полученном векторе, сколько раз встречается цифра 6, и выведите это значение на экран

```julia
tmp_res = [2^tmp[i] for i in 1:3]
print(vcat(fill.(tmp_res, [1, 1, 4])...), "\n")

count_6 = count(x -> occursin("6", string(x)), tmp_res)
```

    [16, 64, 8, 8, 8, 8]
    




    2

# 3.10) Вектор значений $y = e^x cos(x)$ в точках $x = 3, 3.1, 3.2, \ldots, 6$, найдите среднее значение $y$

```julia
using Statistics
y1(x) = exp(x)*cos(x)
Y1 = [y1(x) for x in 3:0.1:6]
mean(Y1)
```




    53.11374594642971

# 3.11) Вектор вида $(x^i, y^j)$, $x = 0.1$, $i = 3, 6, 9, \ldots, 36$, $y = 0.2$, $j = 1, 4, 7, \ldots, 34$

```julia
v = []
for j in 1:3:34
    i = j + 2
    push!(v, (0.1^i, 0.2^j))
end
print(v)
```

    Any[(0.0010000000000000002, 0.2), (1.0000000000000004e-6, 0.0016000000000000003), (1.0000000000000005e-9, 1.2800000000000005e-5), (1.0000000000000006e-12, 1.0240000000000006e-7), (1.0000000000000009e-15, 8.192000000000005e-10), (1.000000000000001e-18, 6.5536000000000055e-12), (1.0000000000000012e-21, 5.2428800000000056e-14), (1.0000000000000014e-24, 4.194304000000005e-16), (1.0000000000000015e-27, 3.3554432000000048e-18), (1.0000000000000017e-30, 2.684354560000004e-20), (1.0000000000000018e-33, 2.1474836480000035e-22), (1.000000000000002e-36, 1.717986918400003e-24)]

# 3.12) Вектор с элементами $\frac{2^i}{i}$, $i = 1, 2, \ldots, M$, $M = 25$

```julia
v2 = [(2^i)/i for i in 1:25]
show(v2)
```

    [2.0, 2.0, 2.6666666666666665, 4.0, 6.4, 10.666666666666666, 18.285714285714285, 32.0, 56.888888888888886, 102.4, 186.1818181818182, 341.3333333333333, 630.1538461538462, 1170.2857142857142, 2184.5333333333333, 4096.0, 7710.117647058823, 14563.555555555555, 27594.105263157893, 52428.8, 99864.38095238095, 190650.18181818182, 364722.0869565217, 699050.6666666666, 1.34217728e6]

# 3.13) Вектор вида $("fn1", "fn2", \ldots, "fnN")$, $N = 30$

```julia
v3 = ["fn$i" for i in 1:30]
print(v3)
```

    ["fn1", "fn2", "fn3", "fn4", "fn5", "fn6", "fn7", "fn8", "fn9", "fn10", "fn11", "fn12", "fn13", "fn14", "fn15", "fn16", "fn17", "fn18", "fn19", "fn20", "fn21", "fn22", "fn23", "fn24", "fn25", "fn26", "fn27", "fn28", "fn29", "fn30"]

# 3.14) Cформируйте вектор $(y_2 - x_1, \ldots, y_n - x_{n-1})$

```julia
x = [rand(0:999) for _ in 1:250]
y = [rand(0:999) for _ in 1:250];
```


```julia
for i in 1:249
    j = i + 1
    print(y[j]-x[i], ", ")
end    
```

    463, -534, -306, -758, 428, -7, 35, 577, -71, 271, -326, -291, -137, 84, -213, -165, -842, -164, 167, 736, -2, -361, 405, -640, 398, -720, -855, 659, -150, 597, 168, -195, 841, 253, -168, 15, -475, 300, -293, -645, -117, 206, 314, 250, -93, -346, -230, 594, 615, 404, -97, 95, 285, 122, -68, -53, -465, -602, 84, 831, -430, -119, 186, 369, 31, -328, 808, 568, -56, -348, 655, -143, 377, 439, -359, -495, -694, -817, -417, 188, 75, 195, -328, 210, 46, 187, 11, 924, 368, 282, 337, 614, -37, 41, -247, -212, 11, -331, -658, -2, -505, -310, 388, 921, 562, -425, 83, 181, 517, -272, 734, 15, -405, 64, 10, -218, -263, -2, 177, 126, 53, 78, -29, 714, -114, 246, -308, 544, 127, -889, -470, 508, -125, 465, -178, 58, 553, -376, -767, -669, -464, -641, 481, 356, -37, -771, 334, -176, -31, 316, -514, -633, 235, -418, -3, 234, -224, -345, -205, 397, 8, -696, 7, 793, -345, 65, 334, -420, 603, -895, -206, 535, -424, -188, 177, -352, -282, -373, 429, 834, -674, 18, 315, -395, 114, -141, 3, -42, -861, -387, -191, 516, -318, 587, 740, 72, -129, 417, -522, 116, -396, -767, 132, 70, -121, -202, 240, -201, 518, -732, 83, -46, -146, -389, 96, -629, 185, -249, 26, -543, 448, -621, 218, 30, 158, 453, -130, -196, -269, -565, -109, -103, -535, -434, 126, 237, 765, -331, -66, 54, -349, 232, -213, 409, -201, 397, 365, -646, 615, 

# сформируйте вектор $(x_1 + 2x_2 - x_3, x_2 + 2x_3 - x_4, \ldots, x_{n-2} + 2x_{n-1} - x_n)$

```julia
v4 = [x[i]+2x[i+1]-x[i+2] for i in 1:248]
print(v4)
```

    [1167, 559, 1463, 1527, 729, 575, 27, 1176, 253, 573, 2180, 1364, 579, 1395, 1312, 2169, 1380, 1749, 543, 296, 1047, 149, 1322, 795, 1009, 2178, 1176, 537, 355, 1606, 1077, 171, 345, 984, 576, 1090, 815, 551, 1341, 1500, -209, 1096, 921, -85, 1833, 1181, 714, -320, 301, 2064, 967, 544, 450, 1053, 155, 405, 1121, 1661, 249, 712, 1428, 1669, 353, -17, 1140, 468, -564, 1006, 1287, 600, -37, 1254, 154, 529, 1256, 1952, 2125, 1175, 905, 2243, 27, 1754, 870, 707, 769, 1723, 128, 498, 1392, 1809, -64, 1239, 596, 1561, 850, 214, 819, 2035, 291, 666, 1758, 1621, 487, -413, 1097, 510, 417, 332, 897, 216, 146, 1246, 803, 696, 658, 726, 1936, 1115, 895, 2089, 225, 1436, 321, 271, 1574, 1194, 1029, -507, 1268, 2256, 457, 1817, 1030, 823, 1890, 415, 1240, 1888, 1515, 1238, 2185, 1263, 299, -197, 2176, 241, 1078, 1867, -262, 1186, 2556, 456, 799, 737, 351, 1243, 2026, 1032, 1052, -156, 1678, 765, -214, 736, 168, 201, 2288, -70, 1520, 1534, 462, 476, 1733, 1305, 1047, 1025, 1051, 950, -292, 1027, 2457, -122, 1438, 1163, 1566, 1954, 1147, 1873, 987, 1973, 868, 2072, 1488, 454, -136, 1424, 666, 1313, -35, 841, 2020, 1356, 1051, 631, 672, 1601, 1078, -48, 1166, 1545, 1848, 1892, 1067, 1305, 1866, 634, 826, 871, 2121, 485, 1156, 837, 1845, 529, -347, 1153, 2198, 778, 528, 1740, 1476, 1061, 1912, 1152, 706, 361, 543, 934, 150, 802, 278, 1317, 32, 1502, 876, 193, 1789, 374]

# сформируйте вектор $\left( \frac{sin(y_1)}{cos(x_2)}, \frac{sin(y_2)}{cos(x_3)}, \ldots, \frac{sin(y_{n-1})}{cos(x_n)} \right)$

```julia
v5 = [sin(y[i])/cos(x[i+1]) for i in 1:249]
print(v5)
```

    [-0.6745842183732987, -1.6825450005312823, 0.9153411515450464, 0.7333232677416242, 1.6647531796459059, -0.42126186078024463, 0.9844228126708048, -8.906497024114358, 1.5067436398675185, 0.7511468950111363, -0.11453467177029211, -1.3370939921948997, 4.303850532864917, 0.6391766037429202, 0.4954285391348868, -4.002798073663032, 1.637824356843169, -1.5311683342982254, -4.1500415770080386, 0.5740050068434178, 1.7797706218068639, -0.377354364826323, 1.0901964807557853, 3.2257834766674023, 3.3172809929919174, -0.4401739102860714, -1.3218734271752945, -0.6662103662409736, -75.08971012851696, 2.3025919457723685, 0.9986083697542297, -1.4228602264330832, 0.14727076703440192, 3.537511843162965, -5.771063912213689, 0.1588972218403579, 4.470404898481766, -5.707715643181862, -0.1673223012597803, -1.9019328595897442, 1.2670520495549746, 3.3813193312799488, -0.8162210021846462, -32.11768687190815, -0.9629974290103632, -0.4019711583558352, -4.155383321920947, 0.14526106269810735, -1.008530528764031, -1.1414888220533606, -14.964101095772675, 1.9690702204805675, 0.773349587580056, 0.2871719910676757, -0.5421963901593068, -1.9687918702661718, -0.9170943503763127, -17.313009505363755, 1.2715750675195412, -1.027283434620932, -0.6884776688890338, -0.668101547008839, -0.7471477918276548, -5.0022594884248255, 3.9389771248845524, -1.4911746713848832, -0.47135789920454, -0.4059700645996747, 0.6833251283548055, 12.394678394936497, -0.6719116071285522, 0.11211269538929369, -1.358278231947859, 1.221136969540891, 0.08628841158763813, -1.3946344358601472, -2.441071803030726, 2.6868869629425562, 3.3712982582481628, -0.663716720383341, 0.9708920910971471, 1.0497509734018358, 0.25045033120523535, 0.7944435296023697, -0.6373396879597741, -1.424450308590806, -1.1901674156679867, -0.5694926745641781, 5.970855641996843, -0.24130578899274763, -2.734164152246693, -45.6710165695759, -0.16034132780899288, -1.011691661872145, -0.9282836923952577, 1.413228870898583, 1.0834650689541925, -0.6637160423063161, 4.293297317194785, 1.772028531427789, 0.5316763031015432, 1.0092665287552842, -0.9780387548594637, 1.1399685325053073, 0.3899729836161596, -0.9964171841719676, -1.0690129840518148, 1.2164596204147444, -0.24739818306889474, 0.6742124438666015, 1.6921885517028201, -1.0441252665523293, -0.30431592325333023, 0.8781694903449782, 1.9314372595107905, 0.17228203301966577, -0.5763132773366912, -2.930228295762078, 1.3888209919433627, -0.18736689828272082, 0.7501628187535578, 0.24642188134899234, -0.9137986134006042, 0.6178630950671142, 0.618413003666425, 0.9907672508966314, 1.0260371952923348, 0.2408024354222502, 0.9626066840662316, 1.2775575712343665, -0.8394100245939242, -0.4316916380583659, 2.390424016597817, 0.5091849105386888, -1.3213062627109309, -0.9723939332092745, -2.8133617674761178, -0.24116226526597567, 2.574792990774114, 0.2538233632233257, 13.638825633127503, 7.397035703031871, 4.837300984234891, -40.80996641103742, -0.5170035620858716, 1.9486895050673627, 0.7591404884385023, 1.0341065980666575, 2.372742357267147, -0.6641130756798845, -0.5939209085253998, -3.6278517048607704, 1.07316725159772, -0.9442129887544715, -0.6319038235961286, 0.25318255218618635, -0.9994646280174235, -0.09681028350802562, 0.46633547751302334, -0.42431250309002644, -1.0106331257972418, 1.3687881157943227, 1.1648440557686135, 1.5154411557998941, 1.912516408733903, 1.6324859982747142, -0.27301154543161715, -0.044302907677458626, 0.34042358476025586, -0.3567834489318084, -3.297311442442747, 0.791268452897707, -1.0127854771419673, 0.5741923606906428, -1.0201726883853943, -18.520138569954177, 1.0785337078541746, -1.053186233539371, 0.3222276076533168, -0.6669811442274004, -7.162761616054085, 1.6707107046346212, -2.3261052134681504, 0.29506939642895785, -5.471176877314112, -1.9775644550436138, -1.0065793854881062, 1.3400896119927812, 1.1349074022949257, 1.692924575499498, -0.09115184741109533, -0.968855886456569, 0.7669970763716036, -0.8775004467851603, 1.8366277154160737, -0.9395880108758331, 1.041328065838295, 0.39830157251174375, -0.30564560847329225, -1.0953959108785285, -0.5019816497299621, -0.8138717824500897, -7.21958698572114, 86.3744411998831, -2.068876146219847, -0.06322632792322835, -2.079411406169255, 0.6269037449583941, 1.1220697773868922, 1.3593363467166586, -0.8654219392614899, 1.3926578599376274, 0.42377464387624386, -1.7331408339823828, -0.321082294273689, -0.5613986577519522, 2.753673958021051, 1.660456254705515, -4.816070299425458, 2.458505513213174, 0.9257821362433312, 0.7937528672957129, -1.0942924892918489, 0.026726000175123336, 2.0102230245000148, -0.7531094130037963, 5.488395435664013, 3.0089734993372237, 0.5201308028801809, -0.2943116973917821, 6.463497480353276, -0.12080165995261011, 2.251613110004712, -71.58680310937969, -1.040097038970038, 4.23770466514909, -0.9632170526582253, 0.24533965575331332, -0.7502451891290356, 0.027356296679897408, -0.2117462065651706, 0.6473663506841221, 2.0971858860239574, -1.3200393073621919, -0.6028247721641697, -1.7820752184292208, -1.4117518321594835, -11.767853156456002, 1.0498958644262726]

# вычислите $\sum_{i=1}^{n-1} \frac{e^{-x_{i+1}}}{x_i + 10}$

```julia
sum1 = Base.sum([(exp(-x[i+1]))/(x[i]+10) for i in 1:249])
```




    0.001098200655342411

# выберите элементы вектора $y$, значения которых больше 600, и выведите на экран; определите индексы этих элементов

```julia
for i in y
    if i > 600
        print(i, ", ")
    end
end

println("\nIndices")
println(findall(y .> 600))
```

    959, 924, 756, 677, 611, 829, 841, 621, 792, 966, 985, 898, 978, 647, 985, 828, 624, 976, 755, 673, 970, 702, 829, 615, 623, 845, 962, 815, 916, 618, 652, 656, 956, 949, 978, 918, 663, 706, 837, 968, 618, 739, 819, 882, 603, 747, 826, 675, 764, 991, 893, 812, 810, 822, 830, 826, 756, 626, 652, 812, 871, 820, 603, 816, 661, 664, 744, 959, 830, 664, 778, 825, 759, 965, 662, 924, 906, 603, 672, 613, 940, 766, 879, 858, 610, 833, 603, 616, 644, 752, 696, 728, 610, 779, 971, 604, 620, 740, 761, 
    Indices
    [2, 6, 9, 13, 16, 20, 21, 24, 26, 29, 31, 32, 34, 39, 44, 49, 50, 51, 52, 60, 61, 64, 68, 69, 70, 72, 74, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 94, 104, 105, 106, 110, 112, 119, 120, 121, 122, 124, 125, 127, 129, 133, 134, 135, 137, 138, 144, 149, 157, 161, 165, 168, 170, 173, 175, 176, 180, 181, 183, 186, 187, 188, 192, 193, 194, 195, 196, 198, 199, 204, 208, 210, 212, 213, 214, 216, 220, 222, 224, 225, 227, 228, 229, 232, 238, 246, 247, 248, 250]

# определите значения вектора $x$, соответствующие значениям вектора $y$, значения которых больше 600 (под соответствием понимается расположение на аналогичных индексных позициях)

```julia
for i in findall(y .> 600)
    print(x[i], ", ")
end
```

    536, 244, 586, 439, 735, 105, 329, 750, 743, 309, 730, 242, 345, 435, 264, 9, 572, 852, 212, 139, 618, 26, 47, 679, 399, 179, 95, 841, 66, 204, 645, 32, 581, 696, 581, 49, 743, 296, 47, 56, 572, 380, 334, 426, 621, 773, 78, 50, 483, 399, 68, 935, 357, 619, 273, 903, 162, 568, 802, 112, 394, 901, 971, 522, 487, 518, 125, 857, 24, 919, 822, 609, 449, 980, 337, 166, 215, 255, 576, 457, 313, 857, 904, 756, 524, 693, 856, 707, 722, 25, 858, 806, 272, 608, 346, 223, 375, 780, 698,

# сформируйте вектор $(|x_1 - \bar{x}|^{\frac{1}{2}}, |x_2 - \bar{x}|^{\frac{1}{2}}, \ldots, |x_n - \bar{x}|^{\frac{1}{2}})$, где $\bar{x}$ обозначает среднее значение вектора $x = (x_1, x_2, \ldots, x_n)$

```julia
v6 = [abs(i - mean(x))^1/2 for i in x]
print(v6)
```

    [5.349999999999994, 25.349999999999994, 42.150000000000006, 146.85, 5.349999999999994, 120.65, 115.15, 153.15, 50.349999999999994, 155.15, 98.85, 241.35, 23.150000000000006, 1.6500000000000057, 169.35, 124.85, 248.35, 22.349999999999994, 88.35, 190.15, 78.15, 9.150000000000006, 134.65, 132.35, 45.650000000000006, 128.85, 192.85, 89.15, 88.15, 48.650000000000006, 122.35, 121.65, 174.15, 70.15, 1.6500000000000057, 80.15, 35.349999999999994, 69.15, 25.150000000000006, 90.35, 29.650000000000006, 233.65, 92.85, 110.65, 103.65, 209.85, 115.15, 125.65, 238.15, 43.349999999999994, 183.35, 136.65, 88.15, 99.65, 27.150000000000006, 195.15, 9.650000000000006, 68.35, 51.849999999999994, 173.15, 66.35, 88.85, 15.349999999999994, 229.65, 135.15, 6.150000000000006, 232.15, 219.15, 96.85, 43.150000000000006, 147.65, 153.15, 49.849999999999994, 195.15, 67.85, 161.35, 247.85, 166.35, 3.3499999999999943, 70.85, 177.85, 209.65, 230.35, 140.65, 0.6500000000000057, 10.150000000000006, 79.85, 226.65, 47.849999999999994, 105.35, 47.849999999999994, 218.15, 128.85, 94.65, 126.85, 136.15, 85.15, 71.85, 134.35, 191.65, 90.85, 142.35, 18.150000000000006, 219.15, 214.65, 43.349999999999994, 191.15, 108.65, 131.65, 52.650000000000006, 200.15, 75.65, 60.849999999999994, 91.65, 38.650000000000006, 31.650000000000006, 54.349999999999994, 199.35, 29.650000000000006, 67.85, 143.85, 203.65, 109.35, 217.65, 1.1500000000000057, 129.85, 43.150000000000006, 68.15, 208.65, 253.35, 149.35, 90.65, 224.85, 64.15, 66.85, 143.35, 106.15, 208.85, 176.85, 103.85, 112.35, 194.85, 105.15, 161.65, 92.65, 236.85, 221.65, 158.35, 41.349999999999994, 207.15, 243.35, 171.85, 205.65, 17.849999999999994, 84.15, 33.650000000000006, 158.35, 146.85, 75.65, 35.150000000000006, 186.65, 154.85, 230.65, 203.65, 45.650000000000006, 177.65, 0.3499999999999943, 207.85, 242.65, 242.85, 31.650000000000006, 102.15, 18.349999999999994, 181.85, 0.8499999999999943, 16.349999999999994, 4.650000000000006, 20.150000000000006, 85.15, 180.15, 185.85, 163.35, 230.65, 248.35, 32.349999999999994, 216.85, 168.35, 61.849999999999994, 203.85, 18.349999999999994, 232.35, 18.150000000000006, 247.35, 74.15, 159.65, 135.15, 123.35, 115.15, 45.349999999999994, 195.65, 156.85, 182.85, 2.1500000000000057, 14.150000000000006, 70.65, 14.349999999999994, 107.35, 86.15, 118.65, 185.85, 155.35, 209.35, 135.35, 19.349999999999994, 125.85, 103.85, 114.15, 43.849999999999994, 45.849999999999994, 185.35, 158.65, 110.85, 29.650000000000006, 118.35, 230.15, 121.15, 186.35, 160.35, 106.65, 43.349999999999994, 201.35, 61.349999999999994, 71.35, 158.85, 81.65, 95.15, 139.65, 69.65, 65.15, 181.65, 18.150000000000006, 133.65, 60.849999999999994, 185.15, 159.85, 131.15, 55.150000000000006, 147.35, 169.65, 106.35]

# определите, сколько элементов вектора $y$ отстоят от максимального значения не более, чем на 200

```julia
length([i for i in y if (abs(maximum(y) - i) <= 200)])
```




    49

# определите, сколько чётных и нечётных элементов вектора $x$

```julia
print("четные: ", count(true for i in x if i%2 == 0))
print("\nнечетные: ", count(true for i in x if i%2 != 0))
```

    четные: 129
    нечетные: 121

# определите, сколько элементов вектора $x$ кратны 7

```julia
print("кратны 7: ", count(true for i in x if i%7 == 0))
```

    кратны 7: 38

# отсортируйте элементы вектора $x$ в порядке возрастания элементов вектора $y$

```julia
print(x[sortperm(y)])
```

    [622, 492, 315, 401, 572, 888, 355, 307, 589, 496, 426, 871, 710, 234, 78, 522, 585, 466, 137, 130, 190, 94, 257, 693, 315, 627, 422, 347, 481, 426, 349, 803, 779, 102, 849, 24, 667, 218, 784, 317, 216, 85, 394, 248, 496, 795, 796, 415, 146, 950, 737, 530, 666, 21, 103, 704, 388, 770, 476, 449, 812, 243, 905, 268, 663, 42, 445, 992, 486, 74, 302, 594, 799, 281, 514, 671, 275, 255, 473, 875, 946, 808, 959, 818, 732, 122, 179, 754, 482, 309, 18, 521, 700, 981, 168, 325, 304, 418, 577, 629, 467, 884, 739, 982, 556, 607, 968, 95, 662, 408, 745, 322, 802, 972, 115, 215, 851, 431, 484, 422, 334, 772, 573, 683, 295, 222, 607, 829, 449, 0, 213, 628, 278, 175, 300, 805, 839, 344, 465, 206, 621, 71, 516, 255, 824, 893, 982, 779, 550, 286, 482, 621, 971, 255, 856, 223, 524, 272, 735, 457, 679, 707, 204, 572, 375, 750, 399, 572, 568, 722, 435, 645, 802, 32, 487, 337, 743, 518, 919, 576, 139, 50, 439, 858, 26, 296, 806, 380, 780, 125, 773, 25, 212, 586, 162, 449, 698, 483, 857, 822, 608, 743, 357, 935, 112, 841, 522, 334, 901, 619, 609, 78, 903, 9, 105, 47, 273, 24, 693, 47, 329, 179, 756, 394, 904, 426, 68, 242, 215, 66, 49, 244, 166, 313, 696, 581, 536, 857, 95, 980, 309, 56, 618, 346, 852, 345, 581, 730, 264, 399]

# выведите элементы вектора $x$, которые входят в десятку наибольших (top-10)

```julia
reverse(last(sort(x), 10))
```




    10-element Vector{Int64}:
     992
     982
     982
     981
     980
     972
     971
     968
     959
     950

# сформируйте вектор, содержащий только уникальные (неповторяющиеся) элементы вектора $x$

```julia
print(unique(x))
```

    [496, 536, 401, 779, 244, 255, 179, 586, 175, 683, 968, 439, 482, 824, 735, 982, 530, 662, 105, 329, 467, 216, 750, 394, 743, 871, 307, 309, 388, 730, 242, 137, 345, 325, 556, 347, 435, 666, 426, 18, 671, 264, 278, 905, 234, 9, 572, 852, 212, 286, 431, 95, 466, 622, 589, 139, 618, 663, 516, 26, 215, 473, 21, 47, 679, 399, 190, 585, 621, 808, 981, 818, 492, 627, 841, 66, 946, 204, 484, 465, 645, 32, 581, 696, 49, 296, 739, 213, 315, 629, 754, 102, 667, 770, 449, 56, 103, 268, 222, 380, 85, 334, 607, 302, 408, 422, 594, 884, 773, 78, 704, 50, 483, 745, 349, 68, 992, 784, 304, 935, 357, 619, 772, 273, 903, 839, 693, 710, 875, 275, 162, 300, 959, 42, 802, 568, 71, 972, 829, 74, 521, 317, 418, 415, 112, 795, 24, 130, 486, 901, 0, 971, 281, 522, 849, 487, 518, 476, 445, 125, 857, 812, 550, 919, 822, 609, 893, 950, 980, 337, 166, 732, 576, 94, 799, 851, 481, 457, 344, 514, 700, 313, 248, 796, 904, 756, 524, 737, 257, 573, 577, 856, 168, 707, 722, 25, 243, 858, 806, 272, 888, 608, 628, 803, 322, 295, 206, 346, 355, 122, 218, 115, 805, 223, 375, 780, 146, 698]

# Создадим массив squares, в котором будут храниться квадраты всех целых чисел от 1 до 100.

```julia
squares = [i^2 for i in 1:100]
print(squares)
```

    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000]

# Сгенерируем массив myprimes, в котором будут храниться первые 168 простых чисел. 


```julia
using Primes
myprimes = primes(prime(168))
print(myprimes)
```

    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]


```julia
prime(89)
```




    461


# Получим срез массива с 89-го до 99-го элемента включительно, содержащий наименьшие простые числа.

```julia
myprimes[89:99]
```




    11-element Vector{Int64}:
     461
     463
     467
     479
     487
     491
     499
     503
     509
     521
     523

# 6.1) $\sum_{i=10}^{100} (i^3 + 4i^2)$

```julia
sum = 0
for i in 10:100
    sum = sum + i^3 +4*i^2
end    
print(sum)
```

    26852735

# 6.2) $\sum_{i=1}^{M} \left( \frac{2^i}{i} + \frac{3^i}{i^2} \right), M = 25$

```julia
M = 25
sum = 0
for i in 1:M
    sum = sum + 2^i/i + 3^i/(i^2)
end
print(sum)
```

    2.1291704368143802e9

# 6.3) $1 + \frac{2}{3} + \left( \frac{24}{35} \right) + \left( \frac{246}{357} \right) + \cdots + \left( \frac{24}{35} \cdot \frac{38}{39} \right)$

```julia
N = 38
sum = 1
a_n = 1
for i in 2:2:N
    a_n *= i/(i+1)
    sum += a_n
end
print(sum)
```

    6.976346137897618

# Выводы

В результате выполнения лабораторной работы я изучила несколько структур данных, реализованных в Julia,
научилась применять их и операции над ними для решения задач.
