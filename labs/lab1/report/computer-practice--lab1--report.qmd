---
## Author
author:
  name: Ищенко Ирина Олеговна
  orcid: 0009-0002-0659-9651
  email: 1132226529@rudn.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчет по лабораторной работе №1"
subtitle: "Компьютерный практикум по статистическому анализу данных"
license: "CC BY"
## Generic options
lang: ru-RU
number-sections: true
toc: true
toc-title: "Содержание"
toc-depth: 2
## Crossref customization
crossref:
  lof-title: "Список иллюстраций"
  lot-title: "Список таблиц"
  lol-title: "Листинги"
## Bibliography
bibliography:
  - bib/cite.bib
csl: _resources/csl/gost-r-7-0-5-2008-numeric.csl
## Formats
format:
### Pdf output format
  pdf:
    toc: true
    number-sections: true
    colorlinks: false
    toc-depth: 2
    lof: true # List of figures
    lot: true # List of tables
#### Document
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    linestretch: 1.5
#### Language
    babel-lang: russian
    babel-otherlangs: english
#### Biblatex
    cite-method: biblatex
    biblio-style: gost-numeric
    biblatexoptions:
      - backend=biber
      - langhook=extras
      - autolang=other*
#### Misc options
    csquotes: true
    indent: true
    header-includes: |
      \usepackage{indentfirst}
      \usepackage{float}
      \floatplacement{figure}{H}
      \usepackage[math,RM={Scale=0.94},SS={Scale=0.94},SScon={Scale=0.94},TT={Scale=MatchLowercase,FakeStretch=0.9},DefaultFeatures={Ligatures=Common}]{plex-otf}
### Docx output format
  docx:
    toc: true
    number-sections: true
    toc-depth: 2
---

# Цель работы

Основная цель работы — подготовить рабочее пространство и инструментарий для работы с языком программирования Julia, на простейших примерах познакомиться с основами синтаксиса Julia.

# Задание

1. Установите под свою операционную систему Julia, Jupyter.
2. Используя Jupyter Lab, повторите примеры из раздела лабораторной работы.
3. Выполните задания для самостоятельной работы.

# Выполнение лабораторной работы

У меня уже были установлены Julia и Jupyter, поэтому я обновила версию и запустила  ([рис. @fig-001]).

![Запуск Julia. Добавление пакета IJulia](image/1.png){#fig-001 width=70%}

Теперь повторим простейшие примеры для знакомства с синтаксисом Julia ([рис. @fig-002]), ([рис. @fig-003]).

![Выполнение примеров из лабораторной](image/2.png){#fig-002 width=70%}

![Выполнение примеров из лабораторной](image/3.png){#fig-003 width=70%}

**Задание №1**

Изучим документацию по основным функциям Julia для чтения / записи / вывода информации на экран: read(), readline(), readlines(), readdlm(), print(), println(), show(), write(). Приведем свои примеры их использования, поясняя особенности их применения.

Для того, чтобы ознакомиться с документацией достаточно поставить знак `?` перед интересующей функцией. Например, `?print`.

Создадим файл test.txt со следующим содержимым:

```
Course 1
Lab 2
modelling
```

Создадим текстовый файл с любым содержанием в папке, где мы работаем. Откроем его на чтение и прочитаем с помощью команды `read()`. Текст вывелся в одну строку с разделителями `\n`. Также прочитаем текст используя функцию `readline()` - выведется только первая строка. Чтобы прочитать все строки в файле используем команду `readlines()` ([рис. @fig-004]).

![Чтение файла](image/4.png){#fig-004 width=70%}

Далее посмотрим, как работает команда `println()`, `print()` и `show()` ([рис. @fig-005]). `show()` выводит все содержимое скобок.

![Вывод на печать](image/5.png){#fig-005 width=70%}

Посмотрим на работу функции `write()` ([рис. @fig-006]). `IOBuffer()` создает буфер для работы со строками. `write(io, "modelling", " course")` записывает строки в буфер (возвращает количество байт). `String(take!(io))` извлекает и преобразует содержимое буфера в строку.
Демонстрируется возможность последовательной записи и чтения данных.

![Команда записи](image/6.png){#fig-006 width=70%}

**Задание №2**

Изучим документацию по функции `parse()`. Приведем свои примеры её использования, поясняя особенности её применения ([рис. @fig-007]). Функция parse() используется для преобразования строк в числовые значения различных типов:

- преобразование в целые числа (Int) и в числа с плавающей точкой (Float64);

- gреобразование с указанием системы счисления:

`parse(Int, "142"; base = 5) → 47` (число "142" в пятеричной системе)

`parse(Int, "modelling", base = 30)` (слово "modelling" интерпретируется как число в 30-ричной системе)

![Примеры использования функции parse()](image/7.png){#fig-007 width=70%}

**Задание №3**

Изучим синтаксис Julia для базовых математических операций с разным типом переменных: сложение, вычитание, умножение, деление, возведение в степень, извлечение корня, сравнение, логические операции. Приведем примеры с пояснениями по особенностям их применения ([рис. @fig-008]), ([рис. @fig-009]).

![Примеры базовых математических операций](image/8.png){#fig-008 width=70%}

![Примеры базовых математических операций](image/9.png){#fig-009 width=70%}

**Задание №4**

Приведем несколько примеров с пояснениями с операциями над матрицами и векторами: поэлементное сложение матриц, поэлементное вычитание матриц, матричное умножение, умножение матрицы на скаляр, транспонирование матрицы, скалярное произведение векторов и векторное произведение ([рис. @fig-010]), ([рис. @fig-011]).

![примеры операций над матрицами](image/10.png){#fig-010 width=70%}

![примеры операций над векторами](image/11.png){#fig-011 width=70%}

# Выводы

В ходе выполнения лабораторной работы я подготовила рабочее пространство и инструментарий для работы с языком программирования Julia, на простейших примерах познакомилась с основами синтаксиса Julia.
